<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.seecoder.courselearning.mapperservice.course.test.CourseTestMapper">

    <resultMap id="MyResultMap" type="cn.seecoder.courselearning.po.course.test.CourseTestPO">
        <id column="test_id" jdbcType="INTEGER" property="testId"/>
        <result column="start_time" jdbcType="DATE" property="startTime"/>
        <result column="end_time" jdbcType="DATE" property="endTime"/>
        <result column="course_id" jdbcType="INTEGER" property="courseId"/>
        <result column="test_status" jdbcType="INTEGER" property="testStatus"/>
        <result column="test_name" jdbcType="VARCHAR" property="testName"/>
    </resultMap>
    <resultMap id="MyMap" type="cn.seecoder.courselearning.po.course.test.CourseUserTestPO">
        <result column="test_id" property="testId"/>
        <result column="user_id" property="userId"/>
        <result column="score" property="score"/>
    </resultMap>

    <delete id="deleteTest" parameterType="java.lang.Integer">
        delete
        from test
        where test_id = #{testId,jdbcType=INTEGER}
    </delete>

    <select id="selectTestById" parameterType="java.lang.Integer" resultMap="MyResultMap">
        select test_id, start_time, end_time, course_id, test_status, test_name
        from test
        where test_id = #{testId}
    </select>

    <insert id="createTest" parameterType="cn.seecoder.courselearning.po.course.test.CourseTestPO"
            useGeneratedKeys="true" keyProperty="testId">
        <selectKey keyProperty="testId" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into test (start_time, end_time, course_id,test_name,test_status)
        values ( #{startTime}, #{endTime}, #{courseId,jdbcType=INTEGER},#{testName},#{testStatus})
    </insert>

    <insert id="addQuestion">
        insert into test_question (test_id, question_id)
        values (#{testId}, #{questionId});
    </insert>

    <update id="updateTest">
        update test
        set start_time=#{startTime},
            end_time=#{endTime},
            course_id=#{courseId},
            test_name=#{testName},
            test_status=#{testStatus}
        where test_id = #{testId,jdbcType=INTEGER}
    </update>

    <update id="updateScore">
        update user_test
        set score=#{score}
        where user_id = #{userId}
          and test_id = #{testId}
    </update>

    <select id="findMyScore" resultMap="MyMap">
        select user_id, test_id, score
        from user_test
        where user_id = #{userId}
          and test_id = #{testId}
    </select>

    <insert id="addTestParticipation">
        insert into user_test(user_id, test_id, score)
        values (#{userId}, #{testId}, -1);
    </insert>
    <select id="findAllTest" parameterType="java.lang.Integer" resultMap="MyResultMap">
        select test_id, start_time, end_time, course_id, test_status, test_name
        from test
        where course_id = #{courseId,jdbcType=INTEGER}
    </select>


    <select id="selectByUserId" parameterType="java.lang.Integer">
        select id,
               origin,
               cost,
               course_id,
               course_name,
               create_time,
               user_id,
               status
        from course_order
        where user_id = #{userId}
    </select>
    <select id="queryMostRecentOrder" parameterType="java.lang.Integer">
        select id,
               origin,
               cost,
               course_id,
               course_name,
               create_time,
               user_id,
               status
        from course_order
        where user_id = #{userId}
          and course_id = #{courseId}
        order by create_time desc
        limit 1
    </select>
    <select id="getIfBuy">
        select id,
               origin,
               cost,
               course_id,
               course_name,
               create_time,
               user_id,
               status
        from course_order
        where user_id = #{userId}
          and course_id = #{courseId}
    </select>
</mapper>